// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BoosterAdded extends ethereum.Event {
  get params(): BoosterAdded__Params {
    return new BoosterAdded__Params(this);
  }
}

export class BoosterAdded__Params {
  _event: BoosterAdded;

  constructor(event: BoosterAdded) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BoosterAddedForSale extends ethereum.Event {
  get params(): BoosterAddedForSale__Params {
    return new BoosterAddedForSale__Params(this);
  }
}

export class BoosterAddedForSale__Params {
  _event: BoosterAddedForSale;

  constructor(event: BoosterAddedForSale) {
    this._event = event;
  }

  get _type(): string {
    return this._event.parameters[0].value.toString();
  }

  get boosterid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BoosterSold extends ethereum.Event {
  get params(): BoosterSold__Params {
    return new BoosterSold__Params(this);
  }
}

export class BoosterSold__Params {
  _event: BoosterSold;

  constructor(event: BoosterSold) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _BoosterType(): string {
    return this._event.parameters[1].value.toString();
  }

  get _boosterId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get salePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BoostersBought extends ethereum.Event {
  get params(): BoostersBought__Params {
    return new BoostersBought__Params(this);
  }
}

export class BoostersBought__Params {
  _event: BoostersBought;

  constructor(event: BoostersBought) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _BoosterType(): string {
    return this._event.parameters[2].value.toString();
  }

  get boostersBought(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountToBePaid(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FundsTransferred extends ethereum.Event {
  get params(): FundsTransferred__Params {
    return new FundsTransferred__Params(this);
  }
}

export class FundsTransferred__Params {
  _event: FundsTransferred;

  constructor(event: FundsTransferred) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentTokenUpdated extends ethereum.Event {
  get params(): PaymentTokenUpdated__Params {
    return new PaymentTokenUpdated__Params(this);
  }
}

export class PaymentTokenUpdated__Params {
  _event: PaymentTokenUpdated;

  constructor(event: PaymentTokenUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SalePriceUpdated extends ethereum.Event {
  get params(): SalePriceUpdated__Params {
    return new SalePriceUpdated__Params(this);
  }
}

export class SalePriceUpdated__Params {
  _event: SalePriceUpdated;

  constructor(event: SalePriceUpdated) {
    this._event = event;
  }

  get _type(): string {
    return this._event.parameters[0].value.toString();
  }

  get _price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SaleTimeUpdated extends ethereum.Event {
  get params(): SaleTimeUpdated__Params {
    return new SaleTimeUpdated__Params(this);
  }
}

export class SaleTimeUpdated__Params {
  _event: SaleTimeUpdated;

  constructor(event: SaleTimeUpdated) {
    this._event = event;
  }

  get initiateTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokensTransferred extends ethereum.Event {
  get params(): TokensTransferred__Params {
    return new TokensTransferred__Params(this);
  }
}

export class TokensTransferred__Params {
  _event: TokensTransferred;

  constructor(event: TokensTransferred) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SIGHBoosterSale__getBoosterSaleDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class SIGHBoosterSale__getTokenAcceptedResult {
  value0: string;
  value1: Address;

  constructor(value0: string, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class SIGHBoosterSale extends ethereum.SmartContract {
  static bind(address: Address): SIGHBoosterSale {
    return new SIGHBoosterSale("SIGHBoosterSale", address);
  }

  getBoosterSaleDetails(
    _Boostertype: string
  ): SIGHBoosterSale__getBoosterSaleDetailsResult {
    let result = super.call(
      "getBoosterSaleDetails",
      "getBoosterSaleDetails(string):(uint256,uint256,uint256)",
      [ethereum.Value.fromString(_Boostertype)]
    );

    return new SIGHBoosterSale__getBoosterSaleDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getBoosterSaleDetails(
    _Boostertype: string
  ): ethereum.CallResult<SIGHBoosterSale__getBoosterSaleDetailsResult> {
    let result = super.tryCall(
      "getBoosterSaleDetails",
      "getBoosterSaleDetails(string):(uint256,uint256,uint256)",
      [ethereum.Value.fromString(_Boostertype)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHBoosterSale__getBoosterSaleDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCurrentFundsBalance(): BigInt {
    let result = super.call(
      "getCurrentFundsBalance",
      "getCurrentFundsBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentFundsBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentFundsBalance",
      "getCurrentFundsBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAccepted(): SIGHBoosterSale__getTokenAcceptedResult {
    let result = super.call(
      "getTokenAccepted",
      "getTokenAccepted():(string,address)",
      []
    );

    return new SIGHBoosterSale__getTokenAcceptedResult(
      result[0].toString(),
      result[1].toAddress()
    );
  }

  try_getTokenAccepted(): ethereum.CallResult<
    SIGHBoosterSale__getTokenAcceptedResult
  > {
    let result = super.tryCall(
      "getTokenAccepted",
      "getTokenAccepted():(string,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHBoosterSale__getTokenAcceptedResult(
        value[0].toString(),
        value[1].toAddress()
      )
    );
  }

  getTokenBalance(token: Address): BigInt {
    let result = super.call(
      "getTokenBalance",
      "getTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getTokenBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenBalance",
      "getTokenBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initiateTimestamp(): BigInt {
    let result = super.call(
      "initiateTimestamp",
      "initiateTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_initiateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initiateTimestamp",
      "initiateTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _SIGHNFTBoostersContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyBoostersCall extends ethereum.Call {
  get inputs(): BuyBoostersCall__Inputs {
    return new BuyBoostersCall__Inputs(this);
  }

  get outputs(): BuyBoostersCall__Outputs {
    return new BuyBoostersCall__Outputs(this);
  }
}

export class BuyBoostersCall__Inputs {
  _call: BuyBoostersCall;

  constructor(call: BuyBoostersCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _BoosterType(): string {
    return this._call.inputValues[1].value.toString();
  }

  get boostersToBuy(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyBoostersCall__Outputs {
  _call: BuyBoostersCall;

  constructor(call: BuyBoostersCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferBalanceCall extends ethereum.Call {
  get inputs(): TransferBalanceCall__Inputs {
    return new TransferBalanceCall__Inputs(this);
  }

  get outputs(): TransferBalanceCall__Outputs {
    return new TransferBalanceCall__Outputs(this);
  }
}

export class TransferBalanceCall__Inputs {
  _call: TransferBalanceCall;

  constructor(call: TransferBalanceCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferBalanceCall__Outputs {
  _call: TransferBalanceCall;

  constructor(call: TransferBalanceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferTokensCall extends ethereum.Call {
  get inputs(): TransferTokensCall__Inputs {
    return new TransferTokensCall__Inputs(this);
  }

  get outputs(): TransferTokensCall__Outputs {
    return new TransferTokensCall__Outputs(this);
  }
}

export class TransferTokensCall__Inputs {
  _call: TransferTokensCall;

  constructor(call: TransferTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferTokensCall__Outputs {
  _call: TransferTokensCall;

  constructor(call: TransferTokensCall) {
    this._call = call;
  }
}

export class UpdateAcceptedTokenCall extends ethereum.Call {
  get inputs(): UpdateAcceptedTokenCall__Inputs {
    return new UpdateAcceptedTokenCall__Inputs(this);
  }

  get outputs(): UpdateAcceptedTokenCall__Outputs {
    return new UpdateAcceptedTokenCall__Outputs(this);
  }
}

export class UpdateAcceptedTokenCall__Inputs {
  _call: UpdateAcceptedTokenCall;

  constructor(call: UpdateAcceptedTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAcceptedTokenCall__Outputs {
  _call: UpdateAcceptedTokenCall;

  constructor(call: UpdateAcceptedTokenCall) {
    this._call = call;
  }
}

export class UpdateSalePriceCall extends ethereum.Call {
  get inputs(): UpdateSalePriceCall__Inputs {
    return new UpdateSalePriceCall__Inputs(this);
  }

  get outputs(): UpdateSalePriceCall__Outputs {
    return new UpdateSalePriceCall__Outputs(this);
  }
}

export class UpdateSalePriceCall__Inputs {
  _call: UpdateSalePriceCall;

  constructor(call: UpdateSalePriceCall) {
    this._call = call;
  }

  get _BoosterType(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateSalePriceCall__Outputs {
  _call: UpdateSalePriceCall;

  constructor(call: UpdateSalePriceCall) {
    this._call = call;
  }
}

export class UpdateSaleTimeCall extends ethereum.Call {
  get inputs(): UpdateSaleTimeCall__Inputs {
    return new UpdateSaleTimeCall__Inputs(this);
  }

  get outputs(): UpdateSaleTimeCall__Outputs {
    return new UpdateSaleTimeCall__Outputs(this);
  }
}

export class UpdateSaleTimeCall__Inputs {
  _call: UpdateSaleTimeCall;

  constructor(call: UpdateSaleTimeCall) {
    this._call = call;
  }

  get timestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSaleTimeCall__Outputs {
  _call: UpdateSaleTimeCall;

  constructor(call: UpdateSaleTimeCall) {
    this._call = call;
  }
}
